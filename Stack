/*****************************************************
 * class Latkes
 * Implements a stack of Strings using an array as underlying container.
 *****************************************************/

//Anne Duncan
//APCS2 PD8
//HOMEWORK NUMBER 25
//APRIL 8, 2014


class Latkes<P> {

    private P [] _stack;
    private int _stackSize;


    //constructor
    public Latkes( int size ) { 
	_stack = (P[]) new Object[size];
	_stackSize = 0;
    }


    //means of insertion
    public void push(P s ) { 
	//if necessary, create more storage space
	if ( isFull() ) {
	    P[] temp = (P[]) new Object[ _stack.length * 2 ];	
	    for( int i = 0; i < _stack.length; i++ ) {
		temp[i] = _stack[i];
	    }
	    _stack = temp; //old _stack will be devoured by JGC
	}
	//add new element at end of array
	//Q: Why is this more efficient than inserting at front?
	_stack[_stackSize] = s;
	_stackSize++;
    }

    public P peek() {
	if (isEmpty()) {
	    return null;
	}
	return _stack[_stackSize - 1]; 
    }

    //means of removal
    public P pop( ) { 
	P retStr = null;
	if ( isEmpty() )  return null;
	retStr = _stack[ _stackSize---1 ];
	return retStr;
    }

    public int getSize() {
	return _stackSize;
    }

    //chk for emptiness
    public boolean isEmpty() { 
	return _stackSize == 0; 
    }

    //chk for fullness
    public boolean isFull() {
	return _stackSize >= _stack.length; 
    }



 }


    public class StackWork{
    //main method for testing

	   public static String flip (String s) {
	       Latkes l = new Latkes(s.length()); 

	for (int i = 0; i < s.length(); i++) {
	    l.push(s.substring(i,i+1));

	}

	String tmpString = "";

	for (int i = 0; i < s.length(); i++) {
	    tmpString = tmpString + l.pop();
	}

	return tmpString;
    }


     public static boolean allMatched (String s) {


	 Latkes <String> l = new Latkes <String> (s.length());

	 for (int i =0; i <s.length(); i++) {

	     String current = s.substring (i, i+1); 
	     
	     if (current == "(" || current == "{" || current == "[") {
		 l.push (current);
	     }
	     
	     if (!l.isEmpty()) {

		 if ( (current == ")" && l.peek().equals("{")) || (current == ")" && l.peek().equals("[")) || (current == "}" && l.peek().equals ("(")) || (current == "}" && l.peek().equals ("[")) || (current == "]" && l.peek().equals ("{")) || (current == "]" && l.peek().equals ("("))) {
		     return false; //If you are a closing bracket, but right before you was a starting bracket that's different, you are false
		 }			       
	     }


	     if (( current == "(" && l.peek().equals (")")) || (current == "{" && l.peek().equals ("}")) || (current == "[" && l.peek().equals ("]"))) {
		 l.pop(); //If you close off a pair, you can remove it from the stack.
	     }
	 }


	 if (l.isEmpty()) {
	     return true; //Everything has a pair and hasn't returned false
	 }

	 return false;
	 
	     }

	     
    public static void main( String[] args ) {

	Latkes tastyStack = new Latkes(10);

	
	String flipper = "HELLO";
	String matcher = "({()})"; //true
	String matcher2 = "( { ( { } ) ] } )"; //false
	String matcher3 = "{ } {} ( ( ) ) { ( ) [] }"; //true

	System.out.println (flip (flipper));
	System.out.println (allMatched (matcher));
	System.out.println(allMatched(matcher2));
	System.out.println(allMatched(matcher3));




	tastyStack.push("aoo");
	tastyStack.push("boo");
	tastyStack.push("coo");
	tastyStack.push("doo");
	tastyStack.push("eoo");
	tastyStack.push("foo");
	tastyStack.push("goo");
	tastyStack.push("hoo");
	tastyStack.push("ioo");
	tastyStack.push("joo");
	tastyStack.push("coocoo");
	tastyStack.push("cachoo");

	//cachoo
	System.out.println( tastyStack.pop() );
	//coocoo
	System.out.println( tastyStack.pop() );
	//joo
	System.out.println( tastyStack.pop() );
	//ioo
	System.out.println( tastyStack.pop() );
	//hoo
	System.out.println( tastyStack.pop() );
	//goo
	System.out.println( tastyStack.pop() );
	//foo
	System.out.println( tastyStack.pop() );
	//eoo
	System.out.println( tastyStack.pop() );
	//doo
	System.out.println( tastyStack.pop() );
	//coo
	System.out.println( tastyStack.pop() );
	//boo
	System.out.println( tastyStack.pop() );
	//aoo
	System.out.println( tastyStack.pop() );

	//stack empty by now; SOP(null)
	System.out.println( tastyStack.pop() );
    }
    }//end class Latkes

/*****************************************************
 * interface Stack
 * Specifies actions a stack must be able to perform.
 *****************************************************/

public interface Stack<P> {

    //Returns true if this stack is empty, otherwise returns false.
    public boolean isEmpty();

    //Returns the top element of the stack without popping it.
    public P peek();

    //Pops and returns the top element of the stack.
    public P pop();

    //Push an element onto the top of this stack.
    public void	push( P x );

}//end interface

